# least_conn: 연결 요청을 처리할 때 현재 가장 적은 활성 연결 수를 가진 서버에 우선적으로 연결을 전달
# round-robin: 연속된 요청을 순차적으로 다음 서버로 배분. 모든 서버에 대해 균등하게 트래픽을 분산시킴. 서버 간의 상태를 고려하지 않으므로, 각 서버의 부하나 성능 차이를 고려하지 않음
# ip_hash:
# - 클라이언트의 IP 주소를 기반으로 요청을 서버로 분배. 클라이언트의 IP 주소에 대한 해시값을 계산하고, 그 해시값을 이용하여 어느 서버로 요청을 보낼지 결정.
# - 특정 클라이언트가 항상 동일한 서버로 요청을 보낼 수 있다. 특정 세션에 대해 항상 동일한 서버로 요청을 보내기 때문에 세션 유지가 필요한 경우에 유용함
upstream backend {
    least_conn;
    server backend1:5000;
    server backend2:5000;
    # server backend3:5000;
    # server backend4:5000;
    # server backend5:5000;
    # server backend6:5000;
    # server backend7:5000;
    # server backend8:5000;
    # server backend9:5000;
    # server backend10:5000;
}

server {
    listen 80;
    server_name localhost;

    location / {
        proxy_pass http://frontend;
        root /usr/share/nginx/html;
        index index.html;
        # try_files $uri $uri/ =404;
    }
    location /api {
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}